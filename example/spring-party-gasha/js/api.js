"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var ProjectApi=function(){function n(e,t){_classCallCheck(this,n),this.baseReq,this.info,this.jwt,this.date,this.tokenId=e,this.webtoken=t,this.friendo_url=document.getElementById("appjs").dataset.site,this.init()}return _createClass(n,[{key:"init",value:function(){var t=this;this.baseReq=axios.create({baseURL:this.friendo_url,headers:{"Content-Type":"application/json"},dataType:"json",data:{}}),this.baseReq.interceptors.request.use(function(e){return e.headers.Authorization="Bearer "+t.jwt,e},function(e){return console.error(e),Promise.reject(e)}),this.baseReq.interceptors.response.use(function(e){return e.data},function(e){return console.error("res Error:",e),Promise.reject(e)})}},{key:"token",value:function(){var t=this;return axios.get("".concat(this.friendo_url,"token/").concat(this.tokenId),{headers:{webtoken:this.webtoken},dataType:"json"}).then(function(e){return t.jwt=e.data.token,t.info={startDate:e.data.startDate,endDate:e.data.endDate,status:e.data.projectStatus},t.checkPorject()})}},{key:"get",value:function(e,t){var n=this;return this.token().then(function(){return n.baseReq.get(e,t)})}},{key:"post",value:function(e,t,n){var r=this;return this.token().then(function(){return r.baseReq.post(e,t,n)})}},{key:"checkPorject",value:function(){switch(this.info.status){case 0:case 1:return Promise.reject();case 3:return alert("活動已結束"),Promise.reject();default:return Promise.resolve()}}}]),n}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJQcm9qZWN0QXBpIiwidG9rZW5JZCIsIndlYnRva2VuIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImJhc2VSZXEiLCJpbmZvIiwiand0IiwiZGF0ZSIsImZyaWVuZG9fdXJsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImRhdGFzZXQiLCJzaXRlIiwiaW5pdCIsImF4aW9zIiwiY3JlYXRlIiwiZGF0YSIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJ1c2UiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsIl90aGlzIiwiZXJyIiwiYmFzZVVSTCIsImVycm9yIiwiUHJvbWlzZSIsInJlc3BvbnNlIiwicmVzIiwiZGF0YVR5cGUiLCJjb25zb2xlIiwicmVqZWN0IiwidGhlbiIsIl90aGlzMiIsInRva2VuIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsInN0YXR1cyIsInByb2plY3RTdGF0dXMiLCJjaGVja1BvcmplY3QiLCJ1cmwiLCJoZWFkZXIiLCJfdGhpczMiLCJnZXQiLCJhbGVydCIsInJlc29sdmUiXSwibWFwcGluZ3MiOiJ1WkFFTUEsVyxXQUNGLFNBQUFBLEVBQVlDLEVBQVNDLEdBQVVDLGdCQUFBQyxLQUFBSixHQUMzQkksS0FBS0MsUUFDTEQsS0FBS0UsS0FDTEYsS0FBS0csSUFDTEgsS0FBS0ksS0FMUFIsS0FBQUEsUUFNaUJDLEVBTG5CRyxLQUFBRixTQUFZRCxFQUFtQkcsS0FBQUssWUFBQUMsU0FBQUMsZUFBQSxTQUFBQyxRQUFBQyxLQVEzQlQsS0FBS1UsYyw2Q0FOQVIsSUFBQUEsRUFBQUEsS0FDTEYsS0FBQUMsUUFBQVUsTUFBQUMsT0FBQSxDQUNLUixRQUFMSixLQUFBSyxZQUNLUixRQUFVQSxDQUNWQyxlQUFMLG9CQUVLWSxTQUFMLE9BQ0hHLEtBQUEsS0FXR2IsS0FBS0MsUUFBUWEsYUFBYUMsUUFBUUMsSUFBSSxTQUFBSCxHQVZuQyxPQVdDQSxFQUFLSSxRQUFRQyxjQVhkLFVBQUFDLEVBQUFoQixJQUFBVSxHQWFBLFNBQUFPLEdBWENDLE9BRENwQixRQUFMcUIsTUFBcUJGLEdBQ1JHLFFBQUtsQixPQURXZSxLQUVoQnBCLEtBRmdCQyxRQUFBYSxhQUFBVSxTQUFBUixJQUFBLFNBQUFTLEdBS3pCQyxPQUFVRCxFQUFBWixNQUNWQSxTQUFBQSxHQUdDWixPQVRMMEIsUUFBQUwsTUFBQSxhQUFBRixHQVNhTixRQUFBQSxPQUFhQyxPLDhCQUl0QlksSUFBQUEsRUFBQUEsS0FDQSxPQUFPSixNQUFBQSxJQUFBQSxHQUFBQSxPQUFRSyxLQUFSdkIsWUFBQWtCLFVBQUFBLE9BQVB2QixLQUFBSCxTQUFBLENBTEpvQixRQUFBLENBUUtoQixTQUFRYSxLQUFhVSxVQUV2QkUsU0FBRyxTQUVGRyxLQUFBLFNBQU9OLEdBa0JSLE9BdEJITyxFQUFBM0IsSUFBQXNCLEVBQUFaLEtBQUFrQixNQU1IRCxFQUFBNUIsS0FBQSxDQVlXOEIsVUFBV1AsRUFBSVosS0FBS21CLFVBQ3BCQyxRQUFVUixFQUFJWixLQUFLb0IsUUFDbkJDLE9BQVNULEVBWmJaLEtBQUFzQixlQWNNTCxFQUFLTSxtQiwwQkFYUEMsRUFBQUMsR0FBQSxJQUFBQyxFQUFBdkMsS0FESyxPQURnREEsS0FBQStCLFFBQUFGLEtBQUEsV0FJekRILE9BQVVhLEVBQUF0QyxRQUFBdUMsSUFBQUgsRUFBQUMsTywyQkFLTk4sRUFBQUEsRUFBU00sR0FBTXpCLElBQUFBLEVBQUFBLEtBQ2ZvQixPQUFBQSxLQUFVUixRQUFTUSxLQUFBQSxXQUNuQkMsT0FBU1QsRUFBSVosUUFBS3NCLEtBQUFBLEVBQUFBLEVBQUFBLE8scUNBbUIxQixPQUFRbkMsS0FBS0UsS0FBS2dDLFFBQ2QsS0FBSyxFQWRULEtBQU8sRUFDSSxPQUFLakMsUUFBUXVDLFNBRTNCLEtBQUEsRUFtQlcsT0FEQUMsTUFBTSxTQUNDbEIsUUFBUUssU0FqQkgsUUFvQlosT0FBT0wsUUFBUW1CLGlCIiwiZmlsZSI6ImFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5cclxuY2xhc3MgUHJvamVjdEFwaSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbklkLCB3ZWJ0b2tlbikge1xyXG4gICAgICAgIHRoaXMuYmFzZVJlcTtcclxuICAgICAgICB0aGlzLmluZm87XHJcbiAgICAgICAgdGhpcy5qd3Q7XHJcbiAgICAgICAgdGhpcy5kYXRlO1xyXG4gICAgICAgIHRoaXMudG9rZW5JZCA9IHRva2VuSWQ7XHJcbiAgICAgICAgdGhpcy53ZWJ0b2tlbiA9IHdlYnRva2VuO1xyXG4gICAgICAgIHRoaXMuZnJpZW5kb191cmwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcGpzXCIpLmRhdGFzZXQuc2l0ZTtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH1cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5iYXNlUmVxID0gIGF4aW9zLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgIGJhc2VVUkw6IHRoaXMuZnJpZW5kb191cmwsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgIGRhdGE6IHt9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYmFzZVJlcS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGRhdGEuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgdGhpcy5qd3RcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5iYXNlUmVxLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoIHJlcyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXMuZGF0YTtcclxuICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdyZXMgRXJyb3I6JywgZXJyKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcclxuICAgICAgICB9KTsgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHRva2VuKCkge1xyXG4gICAgICAgIHJldHVybiBheGlvcy5nZXQoYCR7dGhpcy5mcmllbmRvX3VybH10b2tlbi8ke3RoaXMudG9rZW5JZH1gLCB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgIFwid2VidG9rZW5cIjogdGhpcy53ZWJ0b2tlblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCJcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5qd3QgPSByZXMuZGF0YS50b2tlblxyXG4gICAgICAgICAgICB0aGlzLmluZm8gPSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydERhdGU6IHJlcy5kYXRhLnN0YXJ0RGF0ZSxcclxuICAgICAgICAgICAgICAgIGVuZERhdGUgOiByZXMuZGF0YS5lbmREYXRlLFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzIDogcmVzLmRhdGEucHJvamVjdFN0YXR1c1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tQb3JqZWN0KCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIGdldCh1cmwsIGhlYWRlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2VSZXEuZ2V0KHVybCwgaGVhZGVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwb3N0KHVybCwgZGF0YSwgaGVhZGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG9rZW4oKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFzZVJlcS5wb3N0KHVybCwgZGF0YSwgaGVhZGVyKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrUG9yamVjdCgpIHsgXHJcbiAgICAgICAgLy8gXCLmtLvli5Xni4DmhYsgID0+IDDvvJrmtLvli5XkuI3lrZjlnKggMe+8muWwmuacqumWi+WniyAy77ya6YCy6KGM5LitIDPvvJrmtLvli5XntZDmnZ9cIlxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5pbmZvLnN0YXR1cykge1xyXG4gICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgIGFsZXJ0KFwi5rS75YuV5bey57WQ5p2fXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==
